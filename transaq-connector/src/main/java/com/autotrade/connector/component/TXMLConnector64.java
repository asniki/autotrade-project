package com.autotrade.connector.component;

import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Pointer;

public interface TXMLConnector64 extends Library {
    /**
     * Функциональный интерфейс метода callback, выполняющий роль указателя на функцию обратного вызова клиента
     * typedef bool (*tcallback)(BYTE* pData);
     */
    interface TCallback extends Callback {
        boolean callback(Pointer pData);
    }

    /**
     * Устанавливает указатель на функцию обратного вызова клиента, которая будет принимать асинхронные информационные сообщения от Коннектора
     * bool SetCallback(tcallback pCallback);
     * @param pCallback Указатель на функцию обратного вызова клиента, имеющую сигнатуру: bool Callback(BYTE* data)
     * @return В случае успешного выполнения функция возвращает true, в противном случае false
     * @apiNote Для высвобождения памяти, аллоцированной Коннектором для размещения данных, следует использовать функцию FreeMemory
     */
    boolean SetCallback(TCallback pCallback);

    /**
     * Выполняет инициализацию библиотеки: запускает поток обработки очереди обратных вызовов, инициализирует систему логирования библиотеки
     * BYTE* Initialize(const BYTE* logPath, int logLevel);
     * @param logPath Путь к директории, в которую будут сохраняться файлы отчетов
     * @param logLevel Глубина логирования: 1 - минимальный; 2 - стандартный; 3 - максимальный
     * @return В случае успешного выполнения функция возвращает 0. В случае ошибки возвращается указатель на сообщение об ошибке.
     * @apiNote Память, выделенная библиотекой под сообщение об ошибке, подлежит очистке с помощью функции FreeMemory
     * @apiNote Функция Initialize может быть вызвана в процессе работы с Коннектором повторно для изменения директории и уровня логирования,
     * но только в случае, когда библиотека остановлена, то есть была выполнена команда disconnect или соединение еще не было установлено.
     */
    Pointer Initialize(Pointer logPath, int logLevel);

    /**
     * Выполняет остановку внутренних потоков библиотеки, в том числе завершает поток обработки очереди обратных вызовов. Останавливает систему логирования библиотеки и закрывает файлы отчетов
     * BYTE* UnInitialize();
     * @return В случае успешного выполнения функция возвращает 0. В случае ошибки возвращается указатель на сообщение об ошибке.
     * @apiNote Память, выделенная библиотекой под сообщение об ошибке, подлежит очистке с помощью функции FreeMemory
     */
    Pointer UnInitialize();

    /**
     * Выполняет очистку памяти, выделенной библиотекой
     * bool FreeMemory(BYTE* pData);
     * @param pData Указатель на выделенную библиотекой память
     * @return В случае успешного выполнения функция возвращает true, в противном случае false
     */
    boolean FreeMemory(Pointer pData);

    /**
     * Служит для передачи команд Коннектору
     * BYTE* SendCommand(BYTE* pData);
     * @param pData Указатель на строку, содержащую xml команду для библиотеки TXmlConnector
     * @return Указатель на XML-сообщение, содержащее данные об успешности или неуспешности выполнения команды. В случае успеха сообщение имеет следующий вид:
     * {result success =”true”/}
     * В случае неуспешного выполнения команды сообщение будет иметь вид:
     * {result success =”false”}
     * 	{message}error message{/message}
     * {/result}
     * В случае исключительной ситуации может быть выдано сообщение:
     * {error}Текст сообщения об ошибке{/error}
     * @apiNote Память, выделенная библиотекой под XML- сообщение, подлежит очистке с помощью функции FreeMemory
     * @apiNote Функция может выполняться только в период между вызовами функций Initialize и UnInitialize
     */
    Pointer SendCommand(Pointer pData);

    /**
     * Изменяет уровень логирования без остановки библиотеки
     * BYTE* SetLogLevel(int logLevel);
     * @param logLevel Глубина логирования: 1 - минимальный; 2 - стандартный; 3 - максимальный
     * @return В случае успешного выполнения функция возвращает 0. В случае ошибки возвращается указатель на сообщение об ошибке
     * @apiNote Память, выделенная библиотекой под сообщение об ошибке, подлежит очистке с помощью функции FreeMemory
     */
    Pointer SetLogLevel(int logLevel);
}
